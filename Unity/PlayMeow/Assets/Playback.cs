using UnityEngine;
using System;
using System.IO;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;

/// <summary>
/// Simple PlayMeow Laser Playback
/// 
/// Reads a CSV file generated by the PlayMeow Recorder and replays
/// the recorded simulation by moving ONLY the specified laser GameObject position.
/// </summary>
public class Playback : MonoBehaviour
{
    [Header("Game Objects")]
    [Tooltip("Reference to the laser pointer GameObject to control")]
    public GameObject laserObject;

    [Header("Playback Settings")]
    [Tooltip("Path to the CSV data file (relative to Application.persistentDataPath)")]
    public string playbackDataPath = "playmeow_data.csv";

    [Tooltip("Playback speed multiplier (1 = normal speed)")]
    [Range(0.1f, 5f)]
    public float playbackSpeed = 1.0f;

    [Tooltip("Loop playback when the end is reached")]
    public bool loopPlayback = false;

    [Tooltip("Automatically start playback on game start")]
    public bool autoStartPlayback = false;

    [Header("Debug")]
    [Tooltip("Display debug information in the console")]
    public bool debugMode = true;

    // Internal variables
    private List<PlaybackDataRow> playbackData = new List<PlaybackDataRow>();
    private bool isPlaying = false;
    private bool isPaused = false;
    private bool dataLoaded = false;
    private float currentPlaybackTime = 0f;
    private int currentDataIndex = 0; // Index *before* the current time segment
    private float totalDuration = 0f;

    // Structure holds only essential laser playback info
    private struct PlaybackDataRow
    {
        public float timestamp;
        public Vector3 laserPos;

        public PlaybackDataRow(float time, Vector3 laser)
        {
            timestamp = time;
            laserPos = laser;
        }
    }

    void Start()
    {
        // Validate required laser reference
        if (laserObject == null)
        {
            Debug.LogError("PlayMeow Playback: Laser GameObject reference not set!");
            enabled = false; // Disable script if setup is invalid
            return;
        }

        // Attempt to load data immediately if auto-start is enabled
        if (autoStartPlayback)
        {
            StartPlayback();
        }
    }

    void Update()
    {
        // Only run update logic if playing, not paused, data is loaded, and we have enough points
        if (!isPlaying || isPaused || !dataLoaded || playbackData.Count < 2)
            return;

        // Advance playback time based on frame time and speed multiplier
        currentPlaybackTime += Time.deltaTime * playbackSpeed;

        // --- Handle reaching the end of the recorded data ---
        if (currentPlaybackTime >= totalDuration)
        {
            if (loopPlayback)
            {
                if (debugMode) Debug.Log("PlayMeow Playback: Looping");
                // Ensure laser is exactly at the last frame's position before resetting
                ApplyDataPoint(playbackData[playbackData.Count - 1]);
                ResetPlayback(); // Reset time and index
                // Start advancing time immediately in the new loop cycle
                currentPlaybackTime += Time.deltaTime * playbackSpeed;
            }
            else
            {
                if (debugMode) Debug.Log("PlayMeow Playback: Finished");
                // Ensure laser is exactly at the last frame's position
                ApplyDataPoint(playbackData[playbackData.Count - 1]);
                StopPlayback(); // Stop playback entirely
                return;         // Exit Update for this frame as playback has stopped
            }
        }

        // --- Find the current segment for interpolation ---
        // Advance the data index while the *next* data point's timestamp is still behind or equal to the current playback time
        while (currentDataIndex + 1 < playbackData.Count && playbackData[currentDataIndex + 1].timestamp <= currentPlaybackTime)
        {
            currentDataIndex++;
        }

        // --- Interpolate position between the surrounding data points ---
        // Ensure we have a valid next point to interpolate towards
        if (currentDataIndex + 1 < playbackData.Count)
        {
            PlaybackDataRow prevPoint = playbackData[currentDataIndex];
            PlaybackDataRow nextPoint = playbackData[currentDataIndex + 1];

            float segmentDuration = nextPoint.timestamp - prevPoint.timestamp;
            float timeIntoSegment = currentPlaybackTime - prevPoint.timestamp;

            // Calculate interpolation factor (t), ensuring no division by zero
            float t = (segmentDuration > 0.0001f) ? Mathf.Clamp01(timeIntoSegment / segmentDuration) : 0f;

            // Interpolate ONLY the laser position
            Vector3 interpolatedLaserPos = Vector3.Lerp(prevPoint.laserPos, nextPoint.laserPos, t);

            // Apply the interpolated position to the laser object's transform
            if (laserObject != null) laserObject.transform.position = interpolatedLaserPos;
        }
        else
        {
            // Fallback: If something unexpected happens and we're past the last segment,
            // just snap to the final recorded position. This case is mostly handled
            // by the end-of-playback logic above.
            ApplyDataPoint(playbackData[playbackData.Count - 1]);
        }
    }

    /// <summary>
    /// Starts or restarts the playback from the beginning.
    /// Loads data if it hasn't been loaded yet.
    /// </summary>
    public void StartPlayback()
    {
        // Load data if it's not already loaded or if loading failed previously
        if (!dataLoaded)
        {
            if (!LoadPlaybackData())
            {
                Debug.LogError("PlayMeow Playback: Could not start playback, data loading failed.");
                return; // Prevent starting if data isn't available
            }
        }

        // Check if we have enough data points to actually play back (need at least start and end)
        if (playbackData.Count < 2)
        {
             Debug.LogWarning("PlayMeow Playback: Not enough data points (< 2) loaded to start playback.");
             return;
        }

        ResetPlayback(); // Set time and index to start
        isPlaying = true;
        isPaused = false;
        if (debugMode) Debug.Log("PlayMeow Playback: Started.");
    }

    /// <summary>
    /// Stops the playback entirely.
    /// </summary>
    public void StopPlayback()
    {
        isPlaying = false;
        isPaused = false;
        // Current position is maintained where it stopped. Time/index remain where they were.
        if (debugMode) Debug.Log("PlayMeow Playback: Stopped.");
    }

    /// <summary>
    /// Pauses the playback at the current time and position.
    /// </summary>
    public void PausePlayback()
    {
        if (isPlaying && !isPaused) // Only pause if currently playing
        {
            isPaused = true;
            if (debugMode) Debug.Log("PlayMeow Playback: Paused.");
        }
    }

    /// <summary>
    /// Resumes playback from the currently paused state.
    /// </summary>
    public void ResumePlayback()
    {
        if (isPlaying && isPaused) // Only resume if playing and paused
        {
            isPaused = false;
            if (debugMode) Debug.Log("PlayMeow Playback: Resumed.");
        }
    }

    /// <summary>
    /// Resets playback timer and index to the beginning.
    /// Also sets the laser position to the first recorded point.
    /// Does not automatically start playback.
    /// </summary>
    private void ResetPlayback()
    {
        currentPlaybackTime = 0f;
        currentDataIndex = 0;
        // Set laser to the initial position immediately upon reset
        if (playbackData.Count > 0)
        {
             ApplyDataPoint(playbackData[0]);
        }
    }

    /// <summary>
    /// Applies the laser position from a specific data row directly to the GameObject.
    /// </summary>
    /// <param name="dataPoint">The data row containing the position to apply.</param>
    private void ApplyDataPoint(PlaybackDataRow dataPoint)
    {
         if (laserObject != null) laserObject.transform.position = dataPoint.laserPos;
    }


    /// <summary>
    /// Loads the CSV data, extracting only timestamp and laser position.
    /// </summary>
    /// <returns>True if data loaded successfully, false otherwise.</returns>
    public bool LoadPlaybackData()
    {
        string filePath = GetFullDataPath();
        playbackData.Clear(); // Clear any previous data
        dataLoaded = false;   // Reset loaded status
        totalDuration = 0f;   // Reset duration

        if (!File.Exists(filePath))
        {
            Debug.LogError($"PlayMeow Playback: Data file not found at '{filePath}'");
            return false;
        }

        try
        {
            using (StreamReader reader = new StreamReader(filePath))
            {
                string line;
                bool isHeader = true; // To skip the first line

                while ((line = reader.ReadLine()) != null)
                {
                    if (isHeader)
                    {
                        isHeader = false; // Mark header as processed
                        continue;        // Skip this line
                    }

                    if (string.IsNullOrWhiteSpace(line)) continue; // Skip empty lines

                    string[] values = line.Split(',');

                    // Check if the row has enough columns to contain laser data (index 6)
                    // Format reminder: 0:ts, 1:cx, 2:cy, 3:cz, 4:lx, 5:ly, 6:lz
                    if (values.Length >= 7)
                    {
                        // Parse timestamp (col 0) and laser position (cols 4, 5, 6)
                        // Use InvariantCulture to handle decimal points consistently
                        float timestamp = float.Parse(values[0], CultureInfo.InvariantCulture);
                        Vector3 laserPos = new Vector3(
                            float.Parse(values[4], CultureInfo.InvariantCulture),
                            float.Parse(values[5], CultureInfo.InvariantCulture),
                            float.Parse(values[6], CultureInfo.InvariantCulture)
                        );

                        // Add the extracted data to our list
                        playbackData.Add(new PlaybackDataRow(timestamp, laserPos));
                    }
                    else
                    {
                         // Warn if a data line seems too short
                         Debug.LogWarning($"PlayMeow Playback: Skipping malformed line (expected >= 7 columns, got {values.Length}): {line}");
                    }
                }
            }

            // After reading all lines, check if we actually loaded any data
            if (playbackData.Count > 0)
            {
                // Sort by timestamp just to be safe, though Recorder should write sequentially
                playbackData = playbackData.OrderBy(row => row.timestamp).ToList();
                // Store the timestamp of the very last data point as the total duration
                totalDuration = playbackData[playbackData.Count - 1].timestamp;
                dataLoaded = true; // Mark data as successfully loaded
                if (debugMode) Debug.Log($"PlayMeow Playback: Loaded {playbackData.Count} laser data points. Total duration: {totalDuration:F2}s. Path: {filePath}");
                return true; // Indicate success
            }
            else
            {
                // Warn if the file was read but contained no valid data rows
                Debug.LogWarning($"PlayMeow Playback: Data file '{filePath}' loaded, but contained no valid data points.");
                return false; // Indicate failure (no data)
            }
        }
        catch (FileNotFoundException) // Specific error if file doesn't exist
        {
            Debug.LogError($"PlayMeow Playback: Data file not found at '{filePath}'");
            return false;
        }
        catch (IOException ex) // Errors during file reading
        {
            Debug.LogError($"PlayMeow Playback: IO Error reading data file '{filePath}': {ex.Message}");
            return false;
        }
        catch (FormatException ex) // Errors parsing numbers (e.g., text in a number column)
        {
            Debug.LogError($"PlayMeow Playback: Error parsing data file '{filePath}'. Check format. Details: {ex.Message}");
            return false;
        }
        catch (Exception ex) // Catch-all for any other unexpected errors
        {
            Debug.LogError($"PlayMeow Playback: An unexpected error occurred loading data from '{filePath}': {ex.Message}");
            return false;
        }
    }

    /// <summary>
    /// Gets the full, absolute path to the data file using persistentDataPath.
    /// </summary>
    public string GetFullDataPath()
    {
        // Combine the persistent data path with the relative file name/path
        return Path.Combine(Application.persistentDataPath, playbackDataPath);
    }

    // No visualization methods (OnDrawGizmos, DrawRuntimeBoundaries, etc.) needed
}